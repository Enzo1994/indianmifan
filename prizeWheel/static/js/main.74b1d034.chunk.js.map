{"version":3,"sources":["components/wheel/wheel.jsx","App.js","serviceWorker.js","index.js"],"names":["Wheel","props","state","prizeMap","rotateTimes","userPrize","currentAngle","userInput","prizeChangeHandler","bind","event","this","setState","target","value","includes","possibleRangeArr","Object","entries","map","key","filter","Boolean","console","log","randomRangeStr","Math","floor","random","length","randomRangeArr","split","randomAngle","alert","wheelStyle","transform","className","type","onChange","onClick","start","style","Component","App","inputValue","inputValueAfter","e","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uSAqFeA,G,kBAlFb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,SAAU,CACR,OAAQ,KACR,QAAS,KACT,SAAU,IACV,UAAW,KACX,UAAW,IACX,UAAW,KACX,UAAW,KACX,UAAW,KAEbC,YAAa,EACbC,UAAW,KACXC,aAAc,EACdC,UAAW,GAEb,EAAKC,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBAlBT,E,gFAoBAC,GACjBC,KAAKC,SAAS,CAAEL,UAAWG,EAAMG,OAAOC,U,8BAEjC,IAAD,OACN,GAAK,CAAC,IAAK,IAAK,IAAK,MAAMC,SAASJ,KAAKT,MAAMK,WAA/C,CAIAI,KAAKC,SAAS,CAAEP,UAAWM,KAAKT,MAAMK,YACtC,IAAMS,EAAmBC,OAAOC,QAAQP,KAAKT,MAAMC,UAChDgB,IAAI,YAAmB,IAAD,mBAAhBC,EAAgB,KACrB,GADqB,MACR,EAAKlB,MAAMK,UACtB,OAAOa,IAGVC,OAAOC,SACVC,QAAQC,IAAIR,GAEZ,IAAMS,EACJT,EAAiBU,KAAKC,MAAMD,KAAKE,SAAWZ,EAAiBa,SAC/DN,QAAQC,IAAIC,GAjBN,IAmBEnB,EAAiBK,KAAKT,MAAtBI,aACRiB,QAAQC,IAAIlB,GAEZ,IAAMwB,EAAiBL,EAAeM,MAAM,KACtCC,EAAcN,KAAKC,MACvBD,KAAKE,UACFE,EAAe,GAAK,EAAI,GAAKA,EAAe,GAAK,EAAI,IACtDA,EAAe,GAAK,GAExBP,QAAQC,IAAIQ,GACZrB,KAAKC,SAAS,CACZR,YAAaO,KAAKT,MAAME,YAAc,EACtCE,aAAc0B,EAAc,KAAUrB,KAAKT,MAAME,mBA7BjD6B,MAAM,uF,+BAkCR,IAAMC,EAAa,CACjBC,UAAU,WAAD,OAAaxB,KAAKT,MAAMI,aAAxB,SAEX,OACE,yBAAK8B,UAAU,aACb,wIACA,wCAAa,2BACXC,KAAK,OACLvB,MAAOH,KAAKT,MAAMK,UAClB+B,SAAU3B,KAAKH,qBAEjB,4BAAQ+B,QAAS5B,KAAK6B,MAAM/B,KAAKE,OAAjC,6BAGA,yBAAKyB,UAAU,kBACb,yBAAKA,UAAU,2BACf,yBAAKA,UAAU,uBAAuBK,MAAOP,U,GA5EnCQ,cC4BLC,G,kBA1BX,WAAY1C,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,CACT0C,WAAW,GACXC,gBAAgB,IAJN,E,sEAQd,OACI,6BACI,kBAAC,EAAD,S,yCAIOC,GACfnC,KAAKC,SAAS,CACVgC,WAAaE,EAAEjC,OAAOC,U,sCAGdgC,GACZnC,KAAKC,SAAS,CACViC,gBAAkBlC,KAAKT,MAAM0C,iB,GAtBvBF,cCSEpB,QACW,cAA7ByB,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.74b1d034.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./wheel.css\";\r\nclass Wheel extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      prizeMap: {\r\n        \"0-45\": \"no\",\r\n        \"45-90\": \"no\",\r\n        \"90-135\": \"2\",\r\n        \"135-180\": \"no\",\r\n        \"180-225\": \"1\",\r\n        \"225-270\": \"no\",\r\n        \"270-315\": \"no\",\r\n        \"315-360\": \"3\"\r\n      },\r\n      rotateTimes: 1,\r\n      userPrize: \"no\",\r\n      currentAngle: 0,\r\n      userInput: 0\r\n    };\r\n    this.prizeChangeHandler = this.prizeChangeHandler.bind(this);\r\n  }\r\n  prizeChangeHandler(event) {\r\n    this.setState({ userInput: event.target.value });\r\n  }\r\n  start() {\r\n    if (![\"1\", \"2\", \"3\", \"no\"].includes(this.state.userInput)) {\r\n      alert(\"输入有误，请输入1,2,3,no 其中之一\");\r\n      return;\r\n    }\r\n    this.setState({ userPrize: this.state.userInput });\r\n    const possibleRangeArr = Object.entries(this.state.prizeMap)\r\n      .map(([key, value]) => {\r\n        if (value == this.state.userInput) {\r\n          return key;\r\n        }\r\n      })\r\n      .filter(Boolean);\r\n    console.log(possibleRangeArr);\r\n    //获取旋转范围：\r\n    const randomRangeStr =\r\n      possibleRangeArr[Math.floor(Math.random() * possibleRangeArr.length)];\r\n    console.log(randomRangeStr);\r\n    // 当前的旋转度数：\r\n    const { currentAngle } = this.state;\r\n    console.log(currentAngle);\r\n    //获取随机旋转度数：\r\n    const randomRangeArr = randomRangeStr.split(\"-\");\r\n    const randomAngle = Math.floor(\r\n      Math.random() *\r\n        (randomRangeArr[1] / 1 - 5 - (randomRangeArr[0] / 1 + 5)) +\r\n        randomRangeArr[0] / 1\r\n    );\r\n    console.log(randomAngle);\r\n    this.setState({\r\n      rotateTimes: this.state.rotateTimes + 1,\r\n      currentAngle: randomAngle + 360 * 5 * this.state.rotateTimes\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const wheelStyle = {\r\n      transform: `rotateZ(${this.state.currentAngle}deg)`\r\n    };\r\n    return (\r\n      <div className=\"container\">\r\n        <label>请输入用户的获奖内容：1、2、3、no皆可</label>\r\n        <div>        <input\r\n          type=\"text\"\r\n          value={this.state.userInput}\r\n          onChange={this.prizeChangeHandler}\r\n        ></input>\r\n        <button onClick={this.start.bind(this)}>点击开始</button></div>\r\n\r\n\r\n        <div className=\"prize__wrapper\">\r\n          <div className=\"prize-pointer__wrapper\"></div>\r\n          <div className=\"prize-wheel__wrapper\" style={wheelStyle}></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Wheel;\r\n","import React,{Component} from 'react'\r\nimport Wheel from './components/wheel/wheel'\r\nimport './App.css'\r\nclass App extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            inputValue:'',\r\n            inputValueAfter:''\r\n        }\r\n    }\r\n    render(){\r\n        return (\r\n            <div>\r\n                <Wheel></Wheel>\r\n            </div>\r\n        )\r\n    }\r\n    inputChangeHandler(e){\r\n        this.setState({\r\n            inputValue : e.target.value\r\n        })\r\n    }\r\n    btnClickHandler(e){\r\n        this.setState({\r\n            inputValueAfter : this.state.inputValue\r\n        })\r\n    }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}